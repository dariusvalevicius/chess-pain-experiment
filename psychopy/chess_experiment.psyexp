<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.2.4">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': 'f&quot;{randint(0, 999999):06.0f}&quot;', 'session': '001'}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="False" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="list" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="1" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="height" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1920, 1080]" valType="list" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="color" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="chess_experiment" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="ioHub" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="exp" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <TextComponent name="text">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3.2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Hello world!" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="routine_2_back"/>
    <Routine name="chess_puzzle">
      <TextComponent name="fixation_chess">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="fixation_chess" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <MouseComponent name="mouse">
        <Param val="white_pieces" valType="list" updates="constant" name="clickable"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="never" valType="str" updates="constant" name="forceEndRoutineOnPress"/>
        <Param val="mouse" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="constant" name="newClicksOnly"/>
        <Param val="on click" valType="str" updates="None" name="saveMouseState"/>
        <Param val="name," valType="list" updates="constant" name="saveParamsClickable"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="False" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="mouse onset" valType="str" updates="constant" name="timeRelativeTo"/>
      </MouseComponent>
      <ImageComponent name="chess_board">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="images/board.png" valType="file" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="" valType="str" updates="constant" name="mask"/>
        <Param val="chess_board" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(1, 1)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="128" valType="num" updates="constant" name="texture resolution"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <CodeComponent name="move_piece">
        <Param val="def coord_to_pos(coord):&amp;#10;    '''Convert coordinate system to&amp;#10;    position (in units of screen height)'''&amp;#10;    if type(coord) == int:&amp;#10;        pos = (coord/8) - 9/16&amp;#10;    else:&amp;#10;        pos = [0, 0]&amp;#10;        for i in range(len(coord)):&amp;#10;            pos[i] = (coord[i]/8) - 9/16&amp;#10;    return pos&amp;#10;    &amp;#10;def pos_to_coord(pos):&amp;#10;    '''Convert position (in units of screen height)&amp;#10;    to coordinate system'''&amp;#10;    if type(pos) == int:&amp;#10;        coord = int(round((pos + 9/16) * 8))&amp;#10;    else:&amp;#10;        coord = [1, 1]&amp;#10;        for i in range(len(pos)):&amp;#10;            coord[i] = int(round((pos[i] + 9/16) * 8))&amp;#10;    return coord&amp;#10;    &amp;#10;def code_to_coord(code):&amp;#10;    '''Convert FEN code to coordinate system'''&amp;#10;    x_axis = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;]&amp;#10;    x_pos = x_axis.index(code[0]) + 1&amp;#10;    y_pos = int(code[1])&amp;#10;    return [x_pos, y_pos]&amp;#10;    &amp;#10;def create_piece(code, x, y, i):&amp;#10;    '''Initialize and display a chess piece'''&amp;#10;    if code.islower():&amp;#10;        image_path = &quot;images/&quot; + code + &quot;.png&quot;&amp;#10;    else:&amp;#10;        image_path = &quot;images/&quot; + code + &quot;_w.png&quot;&amp;#10;    x_pos = coord_to_pos(x)&amp;#10;    y_pos = coord_to_pos(y)&amp;#10;    piece = visual.ImageStim(win=win, name=(code + str(x) + str(y)), image=image_path, &amp;#10;    anchor=&quot;center&quot;, pos=(x_pos, y_pos), size=(1/10, 1/10), depth = (-10 - i),&amp;#10;    texRes=128.0, interpolate=True)&amp;#10;    return piece&amp;#10;    &amp;#10;def create_pieces(fen, board_state):&amp;#10;    '''Create all pieces in the FEN'''&amp;#10;    x = 1&amp;#10;    y = 8&amp;#10;    for i in range(len(fen[0])):&amp;#10;        element = fen[0][i]&amp;#10;        if (element == &quot;/&quot;):&amp;#10;            x = 1&amp;#10;            y -= 1&amp;#10;        if (element.isdigit()):&amp;#10;            x += int(element)&amp;#10;        if (element in piece_codes):&amp;#10;            piece = create_piece(element, x, y, i)&amp;#10;            piece.setAutoDraw(True)&amp;#10;            if element.isupper():&amp;#10;                white_pieces.append(piece)&amp;#10;            else:&amp;#10;                black_pieces.append(piece)&amp;#10;            board_state[y][x] = piece.name&amp;#10;            x += 1&amp;#10;    return white_pieces, black_pieces, board_state&amp;#10;    &amp;#10;def draw_square(code):&amp;#10;    coord = code_to_coord(code)&amp;#10;    x_pos = coord_to_pos(coord[0])&amp;#10;    y_pos = coord_to_pos(coord[1])&amp;#10;    &amp;#10;    polygon = visual.Rect(&amp;#10;        win=win, name=(code + '_square'),&amp;#10;        width=(1/8), height=(1/8),&amp;#10;        ori=0.0, pos=(x_pos, y_pos), anchor='center',&amp;#10;        lineWidth=1.0,     colorSpace='rgb',  lineColor=[0, 0, 0], fillColor=[255/256, 87/256, 51/256],&amp;#10;        depth=-5, interpolate=True)&amp;#10;    polygon.setAutoDraw(True)&amp;#10;    return polygon&amp;#10;    &amp;#10;def lerp_position(start_pos, end_pos, fraction):&amp;#10;    '''Linear interpolation between two points'''&amp;#10;    move_vector = np.subtract(end_pos, start_pos)&amp;#10;    current_pos = start_pos + (fraction * move_vector)&amp;#10;    return current_pos&amp;#10;    &amp;#10;def search_pieces(piece_array, piece_name):&amp;#10;    '''Search for a piece in array by piece.name'''&amp;#10;    for piece in piece_array:&amp;#10;        if piece_name == piece.name:&amp;#10;            return piece&amp;#10;    print(&quot;Warning: Did not find piece by name &quot; + piece_name + &quot; in array.&quot;)&amp;#10;    return None&amp;#10;&amp;#10;def evaluate_move(board_state, black_pieces, white_pieces, target_square):&amp;#10;    '''See if player move is taking an enemy piece'''&amp;#10;    print(target_square)&amp;#10;    target_square_content = board_state[target_square[1]][target_square[0]]&amp;#10;    if target_square_content:&amp;#10;        piece_to_take = search_pieces(black_pieces, target_square_content)&amp;#10;        if piece_to_take is None:&amp;#10;            piece_to_take = search_pieces(white_pieces, target_square_content)&amp;#10;        return piece_to_take&amp;#10;&amp;#10;def move_piece(time_elapsed, piece, start_coord, end_coord, move_time):&amp;#10;    '''Move piece by a certain amount this frame'''&amp;#10;    start_pos = coord_to_pos(start_coord)&amp;#10;    end_pos = coord_to_pos(end_coord)&amp;#10;    move_finished = False&amp;#10;    if (time_elapsed &lt; move_time):&amp;#10;        piece.pos = lerp_position(start_pos, end_pos, time_elapsed / move_time)&amp;#10;    else:&amp;#10;        piece.pos = end_pos&amp;#10;        move_finished = True&amp;#10;    return piece, move_finished&amp;#10;    &amp;#10;def begin_move(piece, start_coord, end_coord):&amp;#10;    '''Initiate the computer movemement of a piece'''&amp;#10;    if piece is None:&amp;#10;        return None&amp;#10;    else:&amp;#10;        return piece, start_coord, end_coord&amp;#10;        &amp;#10;def update_board_state(board_state, old_coord, new_coord, value):&amp;#10;    '''Update the board state matrix&amp;#10;    when a piece changes squares'''&amp;#10;    board_state[new_coord[1]][new_coord[0]] = value&amp;#10;    &amp;#10;    if board_state[old_coord[1]][old_coord[0]] == value: # Only delete old entry if it has not already been replaced&amp;#10;        board_state[old_coord[1]][old_coord[0]] = ''&amp;#10;    &amp;#10;    for row in board_state:&amp;#10;        print(row)&amp;#10;    return board_state&amp;#10;&amp;#10;# Could combine this function with evaluate_move():&amp;#10;def check_valid_move(board_state, white_pieces, coord):&amp;#10;    '''See if player move is valid'''&amp;#10;    target_square_content = board_state[coord[1]][coord[0]]&amp;#10;    if coord[0] &lt; 1 or coord[0] &gt; 8 or coord[1] &lt; 1 or coord[1] &gt; 8:&amp;#10;        return False&amp;#10;    elif search_pieces(white_pieces, target_square_content):&amp;#10;        return False&amp;#10;    else:&amp;#10;        return True&amp;#10;        &amp;#10;def check_correct_move(move_num, moves, start_coord, end_coord):&amp;#10;    correct_start = code_to_coord(moves[move_num][0:2])&amp;#10;    correct_end = code_to_coord(moves[move_num][2:4])&amp;#10;    if (start_coord == correct_start) and (end_coord == correct_end):&amp;#10;        return True&amp;#10;    else:&amp;#10;        return False&amp;#10;        &amp;#10;def clear_pieces(pieces):&amp;#10;    for piece in pieces:&amp;#10;        piece.setAutoDraw(False)&amp;#10;#        piece._unload()&amp;#10;    &amp;#10;&amp;#10;def find_empty_take_square(board_state):&amp;#10;    num_cols = 3&amp;#10;    &amp;#10;    target = [9,8]&amp;#10;    while board_state[target[1]][target[0]]:&amp;#10;        if target[0] == 8 + num_cols:&amp;#10;            target[0] = 9&amp;#10;            target[1] = target[1] - 1&amp;#10;        else:&amp;#10;            target[0] = target[0] + 1&amp;#10;    return target&amp;#10;            &amp;#10;   &amp;#10;   &amp;#10;feedback_text = ''   &amp;#10;&amp;#10;# Data for piece codes and x axis labels&amp;#10;piece_codes = [&quot;p&quot;, &quot;n&quot;, &quot;b&quot;, &quot;r&quot;, &quot;q&quot;, &quot;k&quot;, &quot;P&quot;, &quot;N&quot;, &quot;B&quot;, &quot;R&quot;, &quot;Q&quot;, &quot;K&quot;]&amp;#10;&amp;#10;# Time it takes for a piece to move from A to B&amp;#10;# Could instead make it a speed parameter&amp;#10;move_time = 1&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;## Valid moves per piece&amp;#10;#p_moves = [[0,-1], [0,-2]]&amp;#10;#n_moves = [[-2,1], [-1,2], [1,2], [2,1], [2,-1], [1,-2], [-1,-2], [-2,-1]]&amp;#10;#b_moves = [[&quot;-inf&quot;,&quot;inf&quot;], [&quot;inf&quot;,&quot;inf&quot;], [&quot;inf&quot;,&quot;-inf&quot;], [&quot;-inf&quot;,&quot;-inf&quot;]]&amp;#10;#r_moves = [[&quot;-inf&quot;,0], [0,&quot;inf&quot;], [&quot;inf&quot;,0], [0,&quot;-inf&quot;]]&amp;#10;#q_moves = b_moves + r_moves&amp;#10;#k_moves = [[-1,0], [-1,1], [0,1], [1,1], [1,0], [1,-1], [0,-1], [-1,1]]&amp;#10;&amp;#10;#P_moves = [[" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="myPics = [chess_knight];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# Begin Routine&amp;#10;&amp;#10;# Initialize board state and piece arrays&amp;#10;board_state = [['' for i in range(12)] for i in range(9)]&amp;#10;white_pieces = []&amp;#10;black_pieces = []&amp;#10;&amp;#10;# For testing: sample FEN string&amp;#10;fen_str = FEN&amp;#10;fen = fen_str.split(&quot; &quot;)&amp;#10;&amp;#10;moves_str = moves&amp;#10;moves = moves_str.split()&amp;#10;&amp;#10;# Populate the board based on the FEN&amp;#10;white_pieces, black_pieces, board_state = create_pieces(fen, board_state)&amp;#10;clicked_piece = None&amp;#10;&amp;#10;# Set up first computer move&amp;#10;black_move = True&amp;#10;move_num = 0&amp;#10;&amp;#10;def start_black_move(moves, move_num, board_state):&amp;#10;    # Generate yellow rectangles over first black move&amp;#10;    move_start = moves[move_num][0:2]&amp;#10;    move_end = moves[move_num][2:4]&amp;#10;    highlight_squares = []&amp;#10;    for move in [move_start, move_end]:&amp;#10;        highlight_squares.append(draw_square(move))&amp;#10;        &amp;#10;    # Begin first move&amp;#10;    # This code needs to be generalized in a function&amp;#10;    start_coord = code_to_coord(move_start)&amp;#10;    end_coord = code_to_coord(move_end)&amp;#10;    piece_name = board_state[start_coord[1]][start_coord[0]]&amp;#10;    &amp;#10;    moving_piece = search_pieces(black_pieces, piece_name)&amp;#10;        &amp;#10;    return moving_piece, start_coord, end_coord, highlight_squares&amp;#10;    &amp;#10;moving_piece, start_coord, end_coord, highlight_squares = start_black_move(moves, move_num, board_state)&amp;#10;&amp;#10;# Initialize computer movement clock&amp;#10;move_clock = core.Clock()&amp;#10;move_clock.reset(newT=0.0)&amp;#10;&amp;#10;# Start mouse clock&amp;#10;# This is for a click cooldown to prevent accidental double-clicking&amp;#10;mouse_clock = core.Clock()&amp;#10;mouse_clock.addTime(100)&amp;#10;&amp;#10;# Track correct/incorrect moves&amp;#10;player_move_start = []&amp;#10;correct_move = True&amp;#10;&amp;#10;&amp;#10;&amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="# Each Frame&amp;#10;&amp;#10;# Code executed if a piece is crrently being&amp;#10;# moved by the computer&amp;#10;if moving_piece is not None:&amp;#10;    time_elapsed = move_clock.getTime()&amp;#10;    moving_piece, move_finished = move_piece(time_elapsed, moving_piece, start_coord, end_coord, move_time)&amp;#10;    if move_finished:&amp;#10;        piece_taken = evaluate_move(board_state, black_pieces, white_pieces, end_coord)&amp;#10;        &amp;#10;        board_state = update_board_state(board_state, start_coord, end_coord, moving_piece.name)&amp;#10;        &amp;#10;        # Reset clock&amp;#10;        move_clock.reset()&amp;#10;        &amp;#10;        if black_move:&amp;#10;            move_num = move_num + 1&amp;#10;            black_move = False&amp;#10;            &amp;#10;        if piece_taken:&amp;#10;            take_coord = find_empty_take_square(board_state) # Create function to get empty coord&amp;#10;            moving_piece, start_coord, end_coord = begin_move(piece_taken, end_coord, take_coord)&amp;#10;        else:&amp;#10;            moving_piece = None&amp;#10;&amp;#10;# Check mouse click cooldown&amp;#10;cooldown = mouse_clock.getTime() &lt; 0.1&amp;#10;&amp;#10;# Check for piece selection&amp;#10;if clicked_piece is None and moving_piece is None:&amp;#10;    for piece in white_pieces:                # for each pic&amp;#10;        if not cooldown and mouse.isPressedIn(piece, buttons=[0]):    # If the picture is currently click&amp;#10;            clicked_piece = piece&amp;#10;            player_move_start = pos_to_coord(clicked_piece.pos)&amp;#10;            mouse_clock.reset()&amp;#10;# Check for piece placement&amp;#10;elif clicked_piece is not None:&amp;#10;    clicked_piece.pos = mouse.getPos()&amp;#10;    &amp;#10;    if not cooldown and mouse.isPressedIn(clicked_piece, buttons=[0]):&amp;#10;        snapped_coord = pos_to_coord(mouse.getPos())&amp;#10;        &amp;#10;        # See if move is a redeposit&amp;#10;        redeposit = False&amp;#10;        if snapped_coord == player_move_start:&amp;#10;            redeposit = True&amp;#10;        &amp;#10;        valid_move = check_valid_move(board_state, white_pieces, snapped_coord)&amp;#10;        if valid_move or redeposit:&amp;#10;    &amp;#10;            clicked_piece.pos = coord_to_pos(snapped_coord)&amp;#10;            piece_taken = evaluate_move(board_state, black_pieces, white_pieces, snapped_coord)&amp;#10;            &amp;#10;            # Reset clock&amp;#10;            move_clock.reset()&amp;#10;            &amp;#10;            board_state = update_board_state(board_state, player_move_start, snapped_coord, clicked_piece.name)&amp;#10;&amp;#10;            if piece_taken and not redeposit:&amp;#10;                take_coord = find_empty_take_square(board_state)&amp;#10;                moving_piece, start_coord, end_coord = begin_move(piece_taken, snapped_coord, take_coord)&amp;#10;                &amp;#10;            clicked_piece = None&amp;#10;            &amp;#10;            # Check for correct move or end of puzzle&amp;#10;            correct_move = check_correct_move(move_num, moves, player_move_start, snapped_coord)&amp;#10;            &amp;#10;            if redeposit:&amp;#10;                print(&quot;redepositing&quot;)&amp;#10;            elif (correct_move == False) or (move_num == len(moves) - 1):&amp;#10;                feedback_text = &quot;Correct&quot; if correct_move else &quot;Incorrect&quot;&amp;#10;                continueRoutine = False&amp;#10;            else:&amp;#10;                clear_pieces(highlight_squares)&amp;#10;                move_num = move_num + 1&amp;#10;                black_move = True&amp;#10;                &amp;#10;        mouse_clock.reset()&amp;#10;        &amp;#10;if (black_move) and (moving_piece is None):&amp;#10;    moving_piece, start_coord, end_coord, highlight_squares = start_black_move(moves, move_num, board_state)&amp;#10;&amp;#10;    &amp;#10;&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="feedback_text_slide.text = feedback_text&amp;#10;&amp;#10;clear_pieces(white_pieces)&amp;#10;clear_pieces(black_pieces)&amp;#10;clear_pieces(highlight_squares)&amp;#10;&amp;#10;win.flip()" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="move_piece" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="two_back">
      <TextComponent name="fixation">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="fixation" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="+" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="letter">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="letter" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="0.5" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$thisLetter" valType="str" updates="set every repeat" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp">
        <Param val="'y','n','left','right','space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="$corrAns" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.5" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="True" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instructions_two_back">
      <TextComponent name="text_2">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="text_2" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="This is the 2-back experiment.&amp;#10;&amp;#10;Look at the letter appearing on the screen. Your task is to remember the letter appearing two steps before the current letter. If the current letter is the same as the letter two steps before, e.g. an 'X' followed by a 'Y' followed by another 'X', press the spacebar.&amp;#10;&amp;#10;Press 'space' to begin." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="press_to_continue">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="press_to_continue" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instructions_chess_puzzle">
      <TextComponent name="chess_instructions_1">
        <Param val="-1.0000, -1.0000, -1.0000" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="chess_instructions_1" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Instructions slide&amp;#10;&amp;#10;Complete the chess puzzle" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="next_routine_1">
        <Param val="'space'" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="next_routine_1" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="feedback">
      <TextComponent name="feedback_text_slide">
        <Param val="white" valType="color" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="None" valType="str" updates="constant" name="flip"/>
        <Param val="Open Sans" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.05" valType="num" updates="constant" name="letterHeight"/>
        <Param val="feedback_text_slide" valType="code" updates="None" name="name"/>
        <Param val="" valType="num" updates="constant" name="opacity"/>
        <Param val="0" valType="num" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="1.0" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$feedback_text" valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="num" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="instructions_chess_puzzle"/>
    <LoopInitiator loopType="TrialHandler" name="chess_trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('FEN', '8/1p3p1k/6r1/p1p2KR1/P2pP3/1P1P4/2P5/8 b - - 8 52'), ('moves', 'g6g5 f5g5')]), OrderedDict([('FEN', '5rk1/p5pp/4Q3/8/1P1P4/2P1q2P/P2p1RP1/5RK1 b - - 0 30'), ('moves', 'e3e6 f2f8')]), OrderedDict([('FEN', '6k1/5ppq/8/p2r2B1/1p6/5P2/6PP/R3R2K b - - 0 37'), ('moves', 'd5g5 e1e8')]), OrderedDict([('FEN', '3k4/pp1P4/3KPr2/8/8/8/PP4Rp/8 b - - 0 56'), ('moves', 'h2h1q g2g8 f6f8 g8f8')]), OrderedDict([('FEN', '6k1/p4p1p/4r1pP/1pKR1pP1/1P3r2/2P5/8/8 b - - 0 40'), ('moves', 'a7a6 d5d8 e6e8 d8e8')]), OrderedDict([('FEN', '1r6/1P6/3p4/3B1k2/2P3p1/6Pp/2r1RK1P/8 b - - 4 44'), ('moves', 'c2e2 f2e2')]), OrderedDict([('FEN', 'B1r3k1/p1p2ppp/1p4q1/2p1P3/2b2Pn1/P5P1/3R3P/3R2K1 b - - 0 23'), ('moves', 'c8a8 d2d8 a8d8 d1d8')]), OrderedDict([('FEN', '5b2/5p2/2k1p1P1/p1p1Pn1K/1pP5/1P1N4/P2B4/8 b - - 0 49'), ('moves', 'f7g6 h5g6')]), OrderedDict([('FEN', '3r2k1/1pp2ppp/p1p1rq2/6Q1/4P1b1/3P1N2/PPPN1PK1/R4R2 b - - 9 19'), ('moves', 'f6g5 f3g5')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="conditions_chess.tsv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="num"/>
      <Param name="name" updates="None" val="chess_trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="chess_puzzle"/>
    <Routine name="feedback"/>
    <LoopTerminator name="chess_trials"/>
    <Routine name="instructions_two_back"/>
    <LoopInitiator loopType="TrialHandler" name="trials_two_back">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('thisLetter', 'L'), ('target', 0), ('corrAns', None)]), OrderedDict([('thisLetter', 'J'), ('target', 0), ('corrAns', None)]), OrderedDict([('thisLetter', 'A'), ('target', 0), ('corrAns', None)]), OrderedDict([('thisLetter', 'K'), ('target', 0), ('corrAns', None)]), OrderedDict([('thisLetter', 'A'), ('target', 1), ('corrAns', 'space')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="conditions_twoback.tsv" valType="file"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="5" valType="num"/>
      <Param name="name" updates="None" val="trials_two_back" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="two_back"/>
    <LoopTerminator name="trials_two_back"/>
  </Flow>
</PsychoPy2experiment>
